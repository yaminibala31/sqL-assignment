Task:1. Database Design

1.Create the database named "TechShop" 

my sql> create database Electronic_gadgets;
Query OK, 1 row affected (0.05 sec)

mysql> use Electronic_gadgets;
Database changed

2.Define the schema for the Customers, Products, Orders, OrderDetails and Inventory tables based on the provided schema. and 
4.Create appropriate Primary Key and Foreign Key constraints for referential integrity.

CUSTOMER 
create table customer(cus_id int Primary key,first_name varchar(20),last_name varchar(20),email varchar(50),phn_n
o int,address varchar(20));
Query OK, 0 rows affected (0.08 sec)

mysql> alter table customer modify phn_no varchar(15);
Query OK, 0 rows affected (0.07 sec)

PRODUCTS 
mysql> create table products(pro_id int primary key,pro_name varchar(30),description text,price decimal(10,2) check(price>=0));
Query OK, 0 rows affected (0.07 sec)

ORDERS
 create table orders(o_id int primary key,cus_id int,o_date date, total_amount decimal(10,2) check(total_amount >= 0),foreign key (cus_id) references customer(cus_id) on delete cascade);
Query OK, 0 rows affected (0.10 sec)

ORDERDETAILS
create table orderdetails(orderdetail_id int primary key,o_id int,pro_id int ,quantity int,foreign key (o_id) references orders(o_id) on delete cascade,foreign key (pro_id) references products(pro_id) on delete cascade);
Query OK, 0 rows affected (0.10 sec)

INVENTORY
create table inventory(in_id int primary key,pro_id int,qualityinstock int,laststockupdate timestamp,foreign key (pro_id) references products(pro_id) on delete cascade);
Query OK, 0 rows affected (0.10 sec)

5.	Insert at least 10 sample records into each of the following tables. 

CUSTOMER

mysql> INSERT INTO customer (cus_id, first_name, last_name, email, phn_no, address) VALUES
    -> (1, 'Yamini', 'Bala', 'yamini.bala@example.com', '9876543210', 'Chennai'),
    -> (2, 'Sandra', 'Jenifer', 'sandra.jenifer@example.com', '8765432109', 'Mumbai'),
    -> (3, 'Nive', 'Dhamu', 'nive.dhamu@example.com', '7654321098', 'Delhi'),
    -> (4, 'Faree', 'Tha', 'faree.tha@example.com', '6543210987', 'Bangalore'),
    -> (5, 'Jaya', 'Bharathi', 'jaya.bharathi@example.com', '5432109876', 'Hyderabad'),
    -> (6, 'Moha', 'Seena', 'moha.seena@example.com', '4321098765', 'Pune'),
    -> (7, 'Madhu', 'Mitha', 'madhu.mitha@example.com', '3210987654', 'Kolkata'),
    -> (8, 'Aishu', 'Senthil', 'aishu.senthil@example.com', '2109876543', 'Chennai'),
    -> (9, 'Thiya', 'Shree', 'thiya.shree@example.com', '1098765432', 'Coimbatore'),
    -> (10, 'Kathru', 'Devi', 'kathru.devi@example.com', '9988776655', 'Madurai');
Query OK, 10 rows affected (0.04 sec)
Records: 10  Duplicates: 0  Warnings: 0

PRODUCTS

mysql> INSERT INTO products (pro_id, pro_name, description, price) VALUES
    -> (1, 'Laptop', 'High-performance laptop', 75000.00),
    -> (2, 'Smartphone', 'Latest model smartphone', 45000.00),
    -> (3, 'Tablet', '10-inch display tablet', 30000.00),
    -> (4, 'Smartwatch', 'Fitness tracking smartwatch', 12000.00),
    -> (5, 'Wireless Headphones', 'Noise-canceling headphones', 8000.00),
    -> (6, 'Bluetooth Speaker', 'Portable wireless speaker', 5000.00),
    -> (7, 'Gaming Console', 'Next-gen gaming console', 55000.00),
    -> (8, 'Monitor', '24-inch Full HD monitor', 15000.00),
    -> (9, 'Keyboard', 'Mechanical gaming keyboard', 6000.00),
    -> (10, 'Mouse', 'Wireless ergonomic mouse', 2500.00);
Query OK, 10 rows affected (0.01 sec)
Records: 10  Duplicates: 0  Warnings: 0

ORDERS

mysql> INSERT INTO orders (o_id, cus_id, o_date, total_amount) VALUES
    -> (1, 1, '2024-03-01', 120000.00),
    -> (2, 2, '2024-03-05', 60000.00),
    -> (3, 3, '2024-03-10', 75000.00),
    -> (4, 4, '2024-03-15', 50000.00),
    -> (5, 5, '2024-03-20', 80000.00),
    -> (6, 6, '2024-03-25', 45000.00),
    -> (7, 7, '2024-03-30', 30000.00),
    -> (8, 8, '2024-04-01', 10000.00),
    -> (9, 9, '2024-04-05', 55000.00),
    -> (10, 10, '2024-04-10', 2500.00);
Query OK, 10 rows affected (0.04 sec)
Records: 10  Duplicates: 0  Warnings: 0

ORDERDETAILS

mysql> INSERT INTO orderdetails (orderdetail_id, o_id, pro_id, quantity) VALUES
    -> (1, 1, 1, 1),
    -> (2, 1, 2, 1),
    -> (3, 2, 3, 1),
    -> (4, 3, 4, 2),
    -> (5, 4, 5, 1),
    -> (6, 5, 6, 2),
    -> (7, 6, 7, 1),
    -> (8, 7, 8, 1),
    -> (9, 8, 9, 3),
    -> (10, 9, 10, 5);
Query OK, 10 rows affected (0.01 sec)
Records: 10  Duplicates: 0  Warnings: 0

INVENTORY

mysql> INSERT INTO inventory (in_id, pro_id, qualityinstock, laststockupdate) VALUES
    -> (1, 1, 50, '2024-03-01 10:00:00'),
    -> (2, 2, 30, '2024-03-02 11:00:00'),
    -> (3, 3, 40, '2024-03-03 12:00:00'),
    -> (4, 4, 25, '2024-03-04 13:00:00'),
    -> (5, 5, 60, '2024-03-05 14:00:00'),
    -> (6, 6, 80, '2024-03-06 15:00:00'),
    -> (7, 7, 20, '2024-03-07 16:00:00'),
    -> (8, 8, 35, '2024-03-08 17:00:00'),
    -> (9, 9, 70, '2024-03-09 18:00:00'),
    -> (10, 10, 100, '2024-03-10 19:00:00');
Query OK, 10 rows affected (0.01 sec)
Records: 10  Duplicates: 0  Warnings: 0

Tasks 2: Select, Where, Between, AND, LIKE:  

1.Write an SQL query to retrieve the names and emails of all customers.

mysql> select first_name,last_name,email from customer;
+------------+-----------+----------------------------+
| first_name | last_name | email                      |
+------------+-----------+----------------------------+
| Yamini     | Bala      | yamini.bala@example.com    |
| Sandra     | Jenifer   | sandra.jenifer@example.com |
| Nive       | Dhamu     | nive.dhamu@example.com     |
| Faree      | Tha       | faree.tha@example.com      |
| Jaya       | Bharathi  | jaya.bharathi@example.com  |
| Moha       | Seena     | moha.seena@example.com     |
| Madhu      | Mitha     | madhu.mitha@example.com    |
| Aishu      | Senthil   | aishu.senthil@example.com  |
| Thiya      | Shree     | thiya.shree@example.com    |
| Kathru     | Devi      | kathru.devi@example.com    |
+------------+-----------+----------------------------+ 

2.Write an SQL query to list all orders with their order dates and corresponding customer names

mysql>  select o.o_id,o.o_date,c.first_name,c.last_name from orders o left join customer c on o.cus_id = c.cus_id;
+------+------------+------------+-----------+
| o_id | o_date     | first_name | last_name |
+------+------------+------------+-----------+
|    1 | 2024-03-01 | Yamini     | Bala      |
|    2 | 2024-03-05 | Sandra     | Jenifer   |
|    3 | 2024-03-10 | Nive       | Dhamu     |
|    4 | 2024-03-15 | Faree      | Tha       |
|    5 | 2024-03-20 | Jaya       | Bharathi  |
|    6 | 2024-03-25 | Moha       | Seena     |
|    7 | 2024-03-30 | Madhu      | Mitha     |
|    8 | 2024-04-01 | Aishu      | Senthil   |
|    9 | 2024-04-05 | Thiya      | Shree     |
|   10 | 2024-04-10 | Kathru     | Devi      |
+------+------------+------------+-----------+

3.Write an SQL query to insert a new customer record into the "Customers" table. Include customer information such as name, email, and address

insert into customer(cus_id,first_name,last_name,email,address) values(11,"Bala","Subramaniyan","bala@example.com","chennai");
Query OK, 1 row affected (0.02 sec)

4.Write an SQL query to update the prices of all electronic gadgets in the "Products" table by increasing them by 10%. 

update products set price=price*1.10;
Query OK, 10 rows affected (0.02 sec)
Rows matched: 10  Changed: 10  Warnings: 0

5.Write an SQL query to delete a specific order and its associated order details from the "Orders" and "OrderDetails" tables. Allow users to input the order ID as a parameter. 

mysql> delete from orders where o_id=5;
Query OK, 1 row affected (0.02 sec)

mysql> select * from orderdetails;
+----------------+------+--------+----------+
| orderdetail_id | o_id | pro_id | quantity |
+----------------+------+--------+----------+
|              1 |    1 |      1 |        1 |
|              2 |    1 |      2 |        1 |
|              3 |    2 |      3 |        1 |
|              4 |    3 |      4 |        2 |
|              5 |    4 |      5 |        1 |
|              7 |    6 |      7 |        1 |
|              8 |    7 |      8 |        1 |
|              9 |    8 |      9 |        3 |
|             10 |    9 |     10 |        5 |
+----------------+------+--------+----------+
9 rows in set (0.00 sec)

6.Write an SQL query to insert a new order into the "Orders" table. Include the customer ID, order date, and any other necessary information

 INSERT INTO orders (o_id, cus_id, o_date, total_amount) VALUES(11,11,'2025-01-01',65000.00);
Query OK, 1 row affected (0.02 sec)

7.Write an SQL query to update the contact information (e.g., email and address) of a specific customer in the "Customers" table. Allow users to input the customer ID and new contact information. 

update customer set email="balario@example.com", address="tindivanam" where cus_id=11;
Query OK, 1 row affected (0.05 sec)
Rows matched: 1  Changed: 1  Warnings: 0

8.Write an SQL query to recalculate and update the total cost of each order in the "Orders" table based on the prices and quantities in the "OrderDetails" table


9.Write an SQL query to delete all orders and their associated order details for a specific customer from the "Orders" and "OrderDetails" tables. Allow users to input the customer ID as a parameter

mysql> delete from orders where cus_id=10;
Query OK, 1 row affected (0.05 sec)

10.Write an SQL query to insert a new electronic gadget product into the "Products" table, including product name, category, price, and any other relevant details

INSERT INTO products (pro_id, pro_name, description, price) VALUES(11,"airpods","apple music system",25000.00);
Query OK, 1 row affected (0.05 sec)

11.Write an SQL query to update the status of a specific order in the "Orders" table (e.g., from "Pending" to "Shipped"). Allow users to input the order ID and the new status

Task 3. Aggregate functions, Having, Order By, GroupBy and Joins:  

1.Write an SQL query to retrieve a list of all orders along with customer information (e.g., customer name) for each order. 

select o.o_id,o.o_date,o.total_amount,c.first_name,c.last_name from orders o join customer c on o.cus_id=c.cus_id
;

2.Write an SQL query to find the total revenue generated by each electronic gadget product. 
Include the product name and the total revenue.

select p.pro_name,sum(od.quantity*p.price) as totalrevenue from orderdetails od join products p on od.pro_id=p.pr
o_id group by p.pro_id,p.pro_name;
+---------------------+--------------+
| pro_name            | totalrevenue |
+---------------------+--------------+
| Laptop              |     82500.00 |
| Smartphone          |     49500.00 |
| Tablet              |     33000.00 |
| Smartwatch          |     26400.00 |
| Wireless Headphones |      8800.00 |
| Gaming Console      |     60500.00 |
| Monitor             |     16500.00 |
| Keyboard            |     19800.00 |
| Mouse               |     13750.00 |
+---------------------+--------------+

3.Write an SQL query to list all customers who have made at least one purchase. Include their names and contact information

select c.first_name,c.last_name,c.phn_no from customer c join orders o on c.cus_id=o.cus_id;
+------------+--------------+------------+
| first_name | last_name    | phn_no     |
+------------+--------------+------------+
| Yamini     | Bala         | 9876543210 |
| Sandra     | Jenifer      | 8765432109 |
| Nive       | Dhamu        | 7654321098 |
| Faree      | Tha          | 6543210987 |
| Moha       | Seena        | 4321098765 |
| Madhu      | Mitha        | 3210987654 |
| Aishu      | Senthil      | 2109876543 |
| Thiya      | Shree        | 1098765432 |
| Bala       | Subramaniyan | NULL       |
+------------+--------------+------------+

4.Write an SQL query to find the most popular electronic gadget, which is the one with the highest total quantity ordered. Include the product name and the total quantity ordered.

select p.pro_name, sum(od.quantity) from orderdetails od join products p on od.pro_id=p.pro_id group by p.pro_id
order by sum(od.quantity) desc limit 1;
+----------+------------------+
| pro_name | sum(od.quantity) |
+----------+------------------+
| Mouse    |                5 |
+----------+------------------+

5.Write an SQL query to retrieve a list of electronic gadgets along with their corresponding categories. 

select pro_name,description from products;
+---------------------+-----------------------------+
| pro_name            | description                 |
+---------------------+-----------------------------+
| Laptop              | High-performance laptop     |
| Smartphone          | Latest model smartphone     |
| Tablet              | 10-inch display tablet      |
| Smartwatch          | Fitness tracking smartwatch |
| Wireless Headphones | Noise-canceling headphones  |
| Bluetooth Speaker   | Portable wireless speaker   |
| Gaming Console      | Next-gen gaming console     |
| Monitor             | 24-inch Full HD monitor     |
| Keyboard            | Mechanical gaming keyboard  |
| Mouse               | Wireless ergonomic mouse    |
+---------------------+-----------------------------+
10 rows in set (0.00 sec) 

6.Write an SQL query to calculate the average order value for each customer. Include the customer's name and their average order value

mysql>  select c.first_name,c.last_name,avg(o.total_amount) from customer c join orders o on c.cus_id=o.cus_id group by o.cu
s_id;
+------------+--------------+---------------------+
| first_name | last_name    | avg(o.total_amount) |
+------------+--------------+---------------------+
| Yamini     | Bala         |       120000.000000 |
| Sandra     | Jenifer      |        60000.000000 |
| Nive       | Dhamu        |        75000.000000 |
| Faree      | Tha          |        50000.000000 |
| Moha       | Seena        |        45000.000000 |
| Madhu      | Mitha        |        30000.000000 |
| Aishu      | Senthil      |        10000.000000 |
| Thiya      | Shree        |        55000.000000 |
| Bala       | Subramaniyan |        65000.000000 |

7.Write an SQL query to find the order with the highest total revenue. Include the order ID, customer information, and the total revenue

select c.first_name,c.last_name,c.cus_id,c.email,c.phn_no,o.total_amount from customer c join orders o on c.cus_id=o.cus_id order by o.total_amount desc limit 1;
+------------+-----------+--------+-------------------------+------------+--------------+
| first_name | last_name | cus_id | email                   | phn_no     | total_amount |
+------------+-----------+--------+-------------------------+------------+--------------+
| Yamini     | Bala      |      1 | yamini.bala@example.com | 9876543210 |    120000.00 |
+------------+-----------+--------+-------------------------+------------+--------------+

8.Write an SQL query to list electronic gadgets and the number of times each product has been ordered. 

 select p.pro_name,p.pro_id,count(od.pro_id) from products p join orderdetails od on p.pro_id=od.pro_id group by od.pro_id;
+---------------------+--------+------------------+
| pro_name            | pro_id | count(od.pro_id) |
+---------------------+--------+------------------+
| Laptop              |      1 |                1 |
| Smartphone          |      2 |                1 |
| Tablet              |      3 |                1 |
| Smartwatch          |      4 |                1 |
| Wireless Headphones |      5 |                1 |
| Gaming Console      |      7 |                1 |
| Monitor             |      8 |                1 |
| Keyboard            |      9 |                1 |
| Mouse               |     10 |                1 |
+---------------------+--------+------------------+

9.Write an SQL query to find customers who have purchased a specific electronic gadget product. 
Allow users to input the product name as a parameter

select * from customer c join orders o on c.cus_id=o.cus_id join orderdetails od on od.o_id=o.o_id join products p on od.pro_id=p.pro_id where pro_na
me="Monitor";
+--------+------------+-----------+-------------------------+------------+---------+------+--------+------------+--------------+----------------+------+--------+----------+--------+----------+-------------------------+----------+
| cus_id | first_name | last_name | email                   | phn_no     | address | o_id | cus_id | o_date     | total_amount | orderdetail_id | o_id | pro_id | quantity | pro_id | pro_name | description             | price    |
+--------+------------+-----------+-------------------------+------------+---------+------+--------+------------+--------------+----------------+------+--------+----------+--------+----------+-------------------------+----------+
|      7 | Madhu      | Mitha     | madhu.mitha@example.com | 3210987654 | Kolkata |    7 |      7 | 2024-03-30 |     30000.00 |              8 |    7 |      8 |        1 |      8 | Monitor  | 24-inch Full HD monitor | 16500.00 |
+--------+------------+-----------+-------------------------+------------+---------+------+--------+------------+--------------+----------------+------+--------+----------+--------+----------+-------------------------+----------+

10.Write an SQL query to calculate the total revenue generated by all orders placed within a specific time period. Allow users to input the start and end dates as parameters

select sum(total_amount) from orders group by o_date between '2025-01-01' and '2024-03-15';
+-------------------+
| sum(total_amount) |
+-------------------+
|         510000.00 |
+-------------------+
1 row in set (0.00 sec)

Task 4. Subquery and its type:  

1.Write an SQL query to find out which customers have not placed any orders

mysql> select cus_id,first_name,last_name from customer where cus_id not in(select cus_id from orders);
+--------+------------+-----------+
| cus_id | first_name | last_name |
+--------+------------+-----------+
|      5 | Jaya       | Bharathi  |
|     10 | Kathru     | Devi      |
+--------+------------+-----------+
2 rows in set (0.00 sec)


2.Write an SQL query to find the total number of products available for sale.  

mysql> select count(pro_id) from products;
+---------------+
| count(pro_id) |
+---------------+
|            11 |
+---------------+
1 row in set (0.01 sec)

3.Write an SQL query to calculate the total revenue generated by TechShop.  

mysql> select sum(total_amount) as tottal_revenue from orders;
+----------------+
| tottal_revenue |
+----------------+
|      510000.00 |
+----------------+
1 row in set (0.00 sec)

4.Write an SQL query to calculate the average quantity ordered for products in a specific category. 
Allow users to input the category name as a parameter

mysql> select avg(quantity) from orderdetails where pro_id=(select pro_id from products where pro_name="Mouse");
+---------------+
| avg(quantity) |
+---------------+
|        5.0000 |
+---------------+
1 row in set (0.00 sec)

5.Write an SQL query to calculate the total revenue generated by a specific customer. Allow users to input the customer ID as a parameter.

mysql> select sum(total_amount) as total_revenue from orders where cus_id=(select cus_id from customer where first_name="Thiya");
+---------------+
| total_revenue |
+---------------+
|      55000.00 |
+---------------+
1 row in set (0.00 sec)

6.Write an SQL query to find the customers who have placed the most orders. List their names and the number of orders they've placed

select c.first_name,c.last_name,count(o.cus_id) from customer c join orders o on c.cus_id=o.cus_id group by o.cus_id order by count(cus_id) limit 1;
+------------+-----------+-----------------+
| first_name | last_name | count(o.cus_id) |
+------------+-----------+-----------------+
| Yamini     | Bala      |               1 |
+------------+-----------+-----------------+

7.Write an SQL query to find the most popular product category, which is the one with the highest total quantity ordered across all orders. 

mysql> select p.pro_name,od.pro_id,sum(od.quantity) from products p join orderdetails od on od.pro_id=p.pro_id  group by od.pro_id order by max(od.quantity)limit 1;
+----------+--------+------------------+
| pro_name | pro_id | sum(od.quantity) |
+----------+--------+------------------+
| Laptop   |      1 |                1 |
+----------+--------+------------------+
1 row in set (0.00 sec)

8.Write an SQL query to find the customer who has spent the most money (highest total revenue) on electronic gadgets. List their name and total spending. 

select c.first_name,c.last_name,o.cus_id,max(o.total_amount) from customer c join orders o on o.cus_id=c.cus_id group by o.cus_id order by max(o.total_amount) desc limit 1;
+------------+-----------+--------+---------------------+
| first_name | last_name | cus_id | max(o.total_amount) |
+------------+-----------+--------+---------------------+
| Yamini     | Bala      |      1 |           120000.00 |
+------------+-----------+--------+---------------------+

9.Write an SQL query to calculate the average order value (total revenue divided by the number of orders) for all customers.

mysql>  select cus_id,avg(total_amount) from orders group by cus_id;
+--------+-------------------+
| cus_id | avg(total_amount) |
+--------+-------------------+
|      1 |     120000.000000 |
|      2 |      60000.000000 |
|      3 |      75000.000000 |
|      4 |      50000.000000 |
|      6 |      45000.000000 |
|      7 |      30000.000000 |
|      8 |      10000.000000 |
|      9 |      55000.000000 |
|     11 |      65000.000000 |
+--------+-------------------+
9 rows in set (0.00 sec)

10.Write an SQL query to find the total number of orders placed by each customer and list their names along with the order count. 

mysql> select c.first_name,c.last_name,count(o.cus_id) from customer c join orders o on c.cus_id=o.cus_id group by o.cus_id;
+------------+--------------+-----------------+
| first_name | last_name    | count(o.cus_id) |
+------------+--------------+-----------------+
| Yamini     | Bala         |               1 |
| Sandra     | Jenifer      |               1 |
| Nive       | Dhamu        |               1 |
| Faree      | Tha          |               1 |
| Moha       | Seena        |               1 |
| Madhu      | Mitha        |               1 |
| Aishu      | Senthil      |               1 |
| Thiya      | Shree        |               1 |
| Bala       | Subramaniyan |               1 |
+------------+--------------+-----------------+

























 

















